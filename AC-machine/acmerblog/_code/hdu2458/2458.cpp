#include <queue>#include <cstdio>#include <cstdlib>#include <iostream>using namespace std;const int maxn=210;const int INF=0x7fffffff;int n,m,dis;int cx[maxn];int cy[maxn];int dx[maxn];int dy[maxn];bool vis[maxn];bool map[maxn][maxn];bool searchpath(){    queue<int> Q;    for(int i=1;i<=m;i++)        dy[i]=-1;    for(int i=1;i<=n;i++)    {        dx[i]=-1;        if(cx[i]==-1)        {            Q.push(i);            dx[i]=0;        }    }    dis=INF;    while(!Q.empty())    {        int u=Q.front();        Q.pop();        if(dx[u]>dis)            break;        for(int i=1;i<=m;i++)        {            if(dy[i]==-1&&map[u][i])            {                dy[i]=dx[u]+1;                if(cy[i]==-1)                    dis=cy[i];                else                 {                    dx[cy[i]]=dy[i]+1;                    Q.push(cy[i]);                }            }        }    }    return dis!=INF;}int findpath(int u){    for(int i=1;i<=m;i++)    {        if(!vis[i]&&map[u][i]&&dy[i]==dx[u]+1)        {            vis[i]=true;            if(dy[i]==dis&&cy[i]!=-1)                continue;            if(cy[i]==-1||findpath(cy[i]))            {                cx[u]=i;                cy[i]=u;                return 1;            }        }    }    return 0;}int Hopcroft_Karp(){    int ans=0;    for(int i=1;i<=n;i++)        cx[i]=-1;    for(int i=1;i<=m;i++)        cy[i]=-1;    while(searchpath())    {          for(int i=1;i<=m;i++)            vis[i]=false;        for(int i=1;i<=n;i++)            if(cx[i]==-1)                ans+=findpath(i);    }    return ans;}                                                                                                                                                                                       int main(){    int x,y,k,icase=1;    while(scanf(“%d%d%d”,&n,&m,&k))    {        if(n==0&&m==0&&k==0) break;        for(int i=1;i<=n;i++)            for(int j=1;j<=m;j++)                map[i][j]=true;        for(int i=1;i<=k;i++)        {            scanf(“%d%d”,&x,&y);            map[x][y]=false;        }        printf(“Case %d: “,icase++);        printf(“%d\n”,n+m-Hopcroft_Karp());    }           