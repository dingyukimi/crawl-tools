void FindStr(DicTree &DicT,DicTree &Root,char strs[], int p, int hash[], bool flag) //true for second, false for first
{ 
    int i;
    if(flag==true&&p==10) 
    {
        if(DicT->tail==true)
        {
            if(lens<1000)
            {
            outstr[p+1]='\0'; 
            strcpy(outs[lens],outstr); 
            } 
            lens++;
        }
        return ;
    }
    if(strs[p]>='a'&&strs[p]<='z')
    {
        if(DicT->letter[strs[p]-'a']!=NULL)
        {   
            if(flag==false&&DicT->letter[strs[p]-'a']->tail==true)
            {
                outstr[p]=strs[p];
                outstr[p+1]='-';
                FindStr(Root,Root,strs,p+1,hash,true);
            }
            outstr[p+(flag==true)]=strs[p];
            FindStr(DicT->letter[strs[p]-'a'],Root,strs,p+1,hash,flag); 
        }
    }
    else
    {
        for(i=0;i<26;i++)
            if(hash[i]!=0&&DicT->letter[i]!=NULL)
            {
                hash[i]--;    
                if(flag==false&&DicT->letter[i]->tail==true)
                 {
                     outstr[p]=i+'a';
                     outstr[p+1]='-';
                     FindStr(Root,Root,strs,p+1,hash,true);
                 }
                //hash[i]--;//错误之处
                outstr[p+(flag==true)]=i+'a';
                FindStr(DicT->letter[i],Root,strs,p+1,hash,flag);
                hash[i]++;
            }
    }
    
}