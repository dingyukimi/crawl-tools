#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<iostream>
#include<string>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1,class T2>inline void gmax(T1 &a,T2 b){if(b>a)a=b;}
template <class T1,class T2>inline void gmin(T1 &a,T2 b){if(b<a)a=b;}
const int N=1e5+10,M=1e5+10,Z=1e9+7,ms63=1061109567;
int casenum,casei;
int n,m;
int x[N],y[N],cc[N];
int ww[M];
int first[M],id;
int w[N],c[N],nxt[N];
LL f[M];
bool e[M];
void ins(int x,int y,int z)
{
    id++;
    w[id]=y;
    c[id]=z;
    nxt[id]=first[x];
    first[x]=id;
}
struct node
{
    int x;LL v;
    node(){}
    node(int x_,LL v_){x=x_;v=v_;}
    bool operator < (const node& b)const {return v>b.v;}
};
priority_queue<node>q;
void inq(int x,LL v)
{
    if(v>=f[x])return;
    f[x]=v;
    q.push(node(x,v));
}
LL dijkstra()
{
    for(int i=1;i<=n;i++)
    {
        ins(y[i],x[i],cc[i]);
        if(ww[y[i]]==0)inq(y[i],0);
    }
    while(!q.empty())
    {
        int x=q.top().x;q.pop();
        if(e[x])continue;e[x]=1;
        for(int z=first[x];z;z=nxt[z])inq(w[z],f[x]+c[z]);
    }
    LL ans=0;
    for(int i=1;i<=m;i++)
    {
        if(ww[i]==2)
        {
            if(f[i]==1e12)return -1;
            ans+=f[i];
        }
    }
    return ans;
}
const int L=1e6;
int Q[L],h,t;
void inQ(int x,LL v)
{
    if(v>=f[x])return;
    f[x]=v;
    if(e[x])return;
    e[x]=1;
    Q[t++]=x;
}
LL spfa()
{
    h=t=0;
    for(int i=1;i<=n;i++)
    {
        ins(y[i],x[i],cc[i]);
        if(ww[y[i]]==0)inQ(y[i],0);
    }
    while(h<t)
    {
        int x=Q[h++];e[x]=0;
        for(int z=first[x];z;z=nxt[z])inQ(w[z],f[x]+c[z]);
    }
    LL ans=0;
    for(int i=1;i<=m;i++)
    {
        if(ww[i]==2)
        {
            if(f[i]==1e12)return -1;
            ans+=f[i];
        }
    }
    return ans;
}
int main()
{
    scanf("%d",&casenum);
    for(casei=1;casei<=casenum;casei++)
    {
        scanf("%d%d",&n,&m);
        for(int i=1;i<=m;i++)
        {
            first[i]=0;
            f[i]=1e12;
            e[i]=0;
        }id=0;
        for(int i=1;i<=n;i++)scanf("%d",&x[i]);
        for(int i=1;i<=n;i++)scanf("%d",&y[i]);
        for(int i=1;i<=n;i++)scanf("%d",&cc[i]);
        for(int i=1;i<=m;i++)scanf("%d",&ww[i]);

        //é¦åæ¯dijkstraåæ³
        //printf("Case #%d: %lld\n",casei,dijkstra());

        //ç¶åæ¯SPFAåæ³
        printf("Case #%d: %lld\n",casei,spfa());
    }
    return 0;
}
/*
ãtrick&&åæ§½ã
æ1e5ä¸ªç¹ï¼è¾¹æä¹ä¸º1e5ï¼æ¯å¯è½çintçã

ãé¢æã
æT(30)ç»æ°æ®ã
å¯¹äºæ¯ç»æ°æ®ænï¼1e5ï¼ä¸ªæåºï¼mï¼1e5ï¼ä¸ªæåº
å¯¹äºæåºiï¼æ¹æå¯ä»¥éæ©æ¯ä»c[i]*numåï¼ï¼0<=c[i]<=1e5ï¼
ä½¿å¾è¿ä¸ªæåºæ´¾åºnumä¸ªå£«åµï¼å¨æåºx[i]ä¸ºæ¹æä½æï¼å¨æåºy[i]ä¸ºè¢ç»ä½æãï¼1<=x[i],y[i]<=mï¼

å¯¹äºæ¯ä¸ªæåºï¼é½æä¸ªæç¥ä»·å¼ï¼0,1,2ï¼ã
å¨æç¥ä»·å¼ä¸º2çæåºï¼æ¹æå¨è¯¥æåºçå£«åµæ°å¿é¡»ä¸¥æ ¼æ¯è¢ç»å¤
å¨æç¥ä»·å¼ä¸º1çæåºï¼æ¹æå¨è¯¥æåºçå£«åµæ°å¿é¡»ä¸è½æ¯è¢ç»å°ï¼æç§è´ªå¿ååï¼å®éä¸å®ä¼ç¸ç­ï¼
å¨æç¥ä»·å¼ä¸º0çæåºï¼æ¹æå¨è¯¥æåºçå£«åµæ°æ æè°ï¼æç§è´ªå¿ååï¼å®éä¸å®ä¼ä¸º0ï¼

è®©ä½ è¾åºä¿éä¸è¿°æ¡ä»¶æ¹æè³å°éè¦è±è´¹çéé±ã
å¦ææ æ³ä¿éè¿ä¸ªæ¡ä»¶ï¼åè¾åº-1ã

ãç±»åã
å·®åçº¦æææ³
ç½ç»æµææ³
æç­è·¯ã

ãåæã
é¦åæä¸ä¸ªå¾æ¾ç¶çè´ªå¿ââ
å¦æä¸ä¸ªæåºçæç¥ä»·å¼ä¸º2ï¼é£ä¹å¨è¿ä¸ªæåºï¼æ°æï¼æ¹åµ-è¢åµ=1
å¦æä¸ä¸ªæåºçæç¥ä»·å¼ä¸º1ï¼é£ä¹å¨è¿ä¸ªæåºï¼æ°æï¼æ¹åµ=è¢åµ=0

è¿é¢æä»¬å¯ä»¥ä»æåºåä¸¤ä¸ªæåºè¿è¾¹ã
ä½æ¯ââå¦ä½æ´å ç®åå°è®¾ç½®å³ç³»å¢ï¼
ä¸ºä½ä¸èèç´æ¥ä»æ¹æåºåè¢æåºè¿è¾¹å¢ï¼

è¿é¢è®¾è®¡å°åéï¼å°½ç®¡æ°æ®å·¨å¤§ä¸è½ç¨ç½ç»æµåï¼æä»¬è¿æ¯å¯ä»¥èèåç®åæ°æ®è§æ¨¡ï¼å¼å¥ææ³ã
æä»¬å¯¹äºæ¯ä¸ªæåºææä¾ç(x,y,z)ï¼ä»æ¹æåºxåè¢æåºyè¿æ¥ä¸æ¡æµéæ ç©·ï¼è´¹ç¨ä¸ºzçè¾¹ã

ç¶åï¼æä»¬æä¸ä¸ªå³é®æ§çé®é¢å°±æ¯ï¼å¦ä½ä¿è¯é¢ç®çè¦æ±å¢ï¼
é¦åæä»¬ç®åé®é¢ï¼åªå»èèåæ³æ§ã
å¯¹äºæææç¥ä»·å¼ä¸º2çæåºï¼å¦æä»è¿ä¸ªæ ·çç¹STåºåï¼æ²¿çå¾ï¼è½å¤è¾¾å°ä»»æä¸ä¸ªæç¥ä»·å¼ä¸º0çç¹ã
é£è¯´æï¼è¿ä¸ªæç¥ä»·å¼ä¸º2çæåºï¼å¯ä»¥ä½¿å¾å¶ä¸çæ¹åµæ¯è¢åµå¤ã
ä¸ºä»ä¹è½è¯´æè¿ä¸ªå¢ï¼
å¾æ¾ç¶ï¼æä»¬å¯¹äºä¸æ¡è¾¹ï¼ä½¿å¾STçæ¹åµ+1ï¼ä¸ä¸ä¸ªç¹çè¢åµ+1ã
ä½æ¯è¿æ ·ï¼å¯¹äºä¸ä¸ä¸ªç¹æ¯æå½±åçã
å¦æä¸ä¸ªç¹éè¦åº¦ä¸º0ï¼æ¾ç¶è¿æ ·å·²ç»å¯ä»¥äºã
å¦æä¸ä¸ªç¹éè¦åº¦ä¸º1ï¼æä»¬è¿è¦ç»§ç»­æè¿1ä¸ªäººè½¬ç§»åºå»ï¼ä¸ç´è½¬ç§»å°éè¦åº¦ä¸º0çç¹ä¸å³å¯ã
å¦æä¸ä¸ªç¹éè¦åº¦ä¸º2ï¼æä»¬ä¾ç¶ä¸å®è¦æè¿1ä¸ªäººè½¬ç§»åºå»ãèåªè¦è½¬ç§»åºå»äºï¼ä¸ä¸ªç¹å®éä¸å¶å®å¹¶æ²¡æåå°å½±åã

äºæ¯ï¼æä»¬æä¸¾ææéè¦åº¦ä¸º2çç¹ï¼æ¯ä¸ªç¹æ²¿çè¿ä¸ªå¾è½¬ç§»ä¸ä¸ªäººå°éè¦åº¦ä¸º0çæåºä¸ï¼è¿éé¢å°±å¯ä»¥ACäºã
ä½ç°å¨ç½ç»æµä¸ï¼å°±æ¯ï¼
[è¶çº§æºç¹->éè¦åº¦ä¸º2çç¹ï¼æµéä¸º1ï¼è´¹ç¨ä¸º0]
[æ¹æåº->è¢æåºï¼æµéæ éï¼è´¹ç¨ä¸ºäººçéä½£ææ¬]
[éè¦åº¦ä¸º0çç¹->è¶çº§æ±ç¹ï¼æµéæ éï¼è´¹ç¨ä¸º0]
è·ä¸ä¸ªæå°è´¹ç¨æå¤§æµï¼å¦ææå¤§æµ=éè¦åº¦ä¸º2çç¹æ°ï¼é£ä¹è¿ä¸ªæå°è´¹ç¨å°±æ¯ç­æ¡äºã

åªæ¯æ¶é´å¤æåº¦ä¸åè®¸æä»¬è·æå°è´¹ç¨æå¤§æµã
ç¶èæä»¬åç°ï¼åºäºè¿éé¢çç¹æ®æ§ï¼å¶å®ç´æ¥æ±ï¼

æä¸¾æ¯ä¸ªéè¦åº¦ä¸º2çç¹ï¼
å¯¹äºæ¯ä¸ªè¿æ ·çç¹ï¼æ±å®å°éè¦åº¦ä¸º0çç¹ä¸­è·ç¦»æè¿çé£ä¸ªçè·ç¦»ã
ç¶åè¿äºè·ç¦»æ±åå³å¯ã

ä½æ¯è¿æ ·æ¯å¤æºæç­è·¯ã
ç¶èæä»¬åç°ï¼åªè¦æè¾¹éè¿æ¥ï¼åå§åææéè¦åº¦ä¸º0çç¹ä¸ºèµ·ç¹ï¼é½å½ä¸ºZEROï¼æ±æç­è·¯ã
ç¶åç´¯å ææéè¦åº¦ä¸º2çç¹çå° ZEROçæç­è·¯å³å¯ã

ãæ¶é´å¤æåº¦&&ä¼åã
dijkstra O(nlogn)
SPFA O(kn)

*/